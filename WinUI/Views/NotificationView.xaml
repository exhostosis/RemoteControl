<?xml version="1.0" encoding="utf-8"?>
<UserControl
    x:Class="WinUI.Views.NotificationView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:n="using:H.NotifyIcon"
    xmlns:converters="using:WinUI.Converters"
    mc:Ignorable="d">
    <UserControl.Resources>
        <converters:BoolToVisibilityConverter x:Name="BoolToVisibilityConverter"/>
        <converters:ServerTypeToVisibilityConverter x:Name="ServerTypeToVisibilityConverter"/>
        <converters:NullToVisibilityConverter x:Name="NullToVisibilityConverter"/>
        <converters:ListToStringConverter x:Name="ListToStringConverter"/>
    </UserControl.Resources>

    <n:TaskbarIcon
        x:Name="TrayIcon"
        ToolTipText="Remote Control"
        IconSource="/Icons/Device.theme-dark.ico"
        MenuActivation="RightClick"
        ContextMenuMode="SecondWindow"
        LeftClickCommand="{x:Bind LeftClickCommand}"
        >
        <n:TaskbarIcon.ContextFlyout>
            <MenuFlyout>
                <MenuFlyoutItem
                    Text="{x:Bind FirstServerViewModel.Name, Mode=OneWay, FallbackValue=''}"
                    Visibility="{x:Bind FirstServerViewModel, Mode=OneWay, Converter={StaticResource NullToVisibilityConverter}}"
                    IsEnabled="False"
                    />
                <MenuFlyoutItem
                    Text="{x:Bind FirstServerViewModel.ListeningUri, Mode=OneWay, FallbackValue=''}"
                    Command="{x:Bind OpenUriCommand}"
                    CommandParameter="{x:Bind FirstServerViewModel.ListeningUri, FallbackValue='', Mode=OneWay}"
                    Visibility="{x:Bind FirstServerViewModel.Type, FallbackValue=Collapsed, Mode=OneWay, Converter={StaticResource ServerTypeToVisibilityConverter}, ConverterParameter='Web'}"
                    IsEnabled="{x:Bind FirstServerViewModel.Status, FallbackValue=False, Mode=OneWay}"
                />
                <MenuFlyoutItem
                    Text="{x:Bind FirstServerViewModel.Usernames, Mode=OneWay, FallbackValue='', Converter={StaticResource ListToStringConverter}}"
                    Visibility="{x:Bind FirstServerViewModel.Type, FallbackValue=Collapsed, Mode=OneWay, Converter={StaticResource ServerTypeToVisibilityConverter}, ConverterParameter='Bot'}"
                    IsEnabled="{x:Bind FirstServerViewModel.Status, FallbackValue=False, Mode=OneWay}"
                />
                <MenuFlyoutItem
                    Text="Start"
                    Command="{x:Bind FirstServerViewModel.StartCommand, FallbackValue={x:Null}, Mode=OneWay}"
                    Visibility="{x:Bind FirstServerViewModel.Status, Mode=OneWay, FallbackValue=Collapsed, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter='Inverse'}"
                    />
                <MenuFlyoutItem
                    Text="Stop"
                    Command="{x:Bind FirstServerViewModel.StopCommand, FallbackValue={x:Null}, Mode=OneWay}"
                    Visibility="{x:Bind FirstServerViewModel.Status, Mode=OneWay, FallbackValue=Collapsed, Converter={StaticResource BoolToVisibilityConverter}}"
                />
                <MenuFlyoutSeparator
                    Visibility="{x:Bind FirstServerViewModel, Mode=OneWay, Converter={StaticResource NullToVisibilityConverter}}"/>

                <MenuFlyoutItem
                    Text="{x:Bind SecondServerViewModel.Name, Mode=OneWay, FallbackValue=''}"
                    Visibility="{x:Bind SecondServerViewModel, Mode=OneWay, Converter={StaticResource NullToVisibilityConverter}}"
                    IsEnabled="False"
                    />
                <MenuFlyoutItem
                    Text="{x:Bind SecondServerViewModel.ListeningUri, Mode=OneWay, FallbackValue=''}"
                    Command="{x:Bind OpenUriCommand}"
                    CommandParameter="{x:Bind SecondServerViewModel.ListeningUri, FallbackValue='', Mode=OneWay}"
                    Visibility="{x:Bind SecondServerViewModel.Type, FallbackValue=Collapsed, Mode=OneWay, Converter={StaticResource ServerTypeToVisibilityConverter}, ConverterParameter='Web'}"
                    IsEnabled="{x:Bind SecondServerViewModel.Status, FallbackValue=False, Mode=OneWay}"
                />
                <MenuFlyoutItem
                    Text="{x:Bind SecondServerViewModel.Usernames, Mode=OneWay, FallbackValue='', Converter={StaticResource ListToStringConverter}}"
                    Visibility="{x:Bind SecondServerViewModel.Type, FallbackValue=Collapsed, Mode=OneWay, Converter={StaticResource ServerTypeToVisibilityConverter}, ConverterParameter='Bot'}"
                    IsEnabled="{x:Bind SecondServerViewModel.Status, FallbackValue=False, Mode=OneWay}"
                />
                <MenuFlyoutItem
                    Text="Start"
                    Command="{x:Bind SecondServerViewModel.StartCommand, FallbackValue={x:Null}, Mode=OneWay}"
                    Visibility="{x:Bind SecondServerViewModel.Status, Mode=OneWay, FallbackValue=Collapsed, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter='Inverse'}"
                    />
                    <MenuFlyoutItem
                    Text="Stop"
                    Command="{x:Bind SecondServerViewModel.StopCommand, FallbackValue={x:Null}, Mode=OneWay}"
                    Visibility="{x:Bind SecondServerViewModel.Status, Mode=OneWay, FallbackValue=Collapsed, Converter={StaticResource BoolToVisibilityConverter}}"
                />
                <MenuFlyoutSeparator
                    Visibility="{x:Bind SecondServerViewModel, Mode=OneWay, Converter={StaticResource NullToVisibilityConverter}}"/>

                <MenuFlyoutItem
                    Command="{x:Bind CollectionViewModel.StartAllCommand}">
                    Start all
                </MenuFlyoutItem>
                <MenuFlyoutItem
                    Command="{x:Bind CollectionViewModel.StopAllCommand}">
                    Stop all
                </MenuFlyoutItem>
                <MenuFlyoutSeparator/>
                <ToggleMenuFlyoutItem 
                    IsChecked="{x:Bind CollectionViewModel.HostAutostart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                    >
                    Autostart
                </ToggleMenuFlyoutItem>
                <MenuFlyoutItem
                    Command="{x:Bind CollectionViewModel.AddFirewallRulesCommand}">
                    Add firewall rule
                </MenuFlyoutItem>
                <MenuFlyoutSeparator/>
                <MenuFlyoutItem
                    Command="{x:Bind ExitCommand}">
                    Exit
                </MenuFlyoutItem>
            </MenuFlyout>
        </n:TaskbarIcon.ContextFlyout>
    </n:TaskbarIcon>
</UserControl>
